generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum RoleType {
  TEACHER
  STUDENT
  ADMIN
}

enum Estado {
  PENDIENTE
  APROBADO
  IMPRIMIENDO
  ESPERANDO_RETIRO
  ENTREGADO
  CON_ERRORES
  DENEGADO
  FALTA_HACER_PIEZAS
  CADUCADO
}

enum Materia {
  TIMI
  PROYECTO
}

model Pedido {
  id                    String   @id @default(cuid())
  fecha                 DateTime
  estado                Estado   @default(PENDIENTE)
  user                  User     @relation("Alumno", fields: [userId], references: [id], onDelete: Cascade)
  userId                String
  materia               Materia
  piezas                Pieza[]
  aprobador             User?    @relation("Profesor", fields: [aprobadorId], references: [id])
  aprobadorId           String?
  observacionesAlumno   String?  @db.Text
  observacionesProfesor String?

  @@index([userId])
  @@index([aprobadorId])
}

model Pieza {
  id       String @id @default(cuid())
  nombre   String
  cantidad Int
  url      String
  pedido   Pedido @relation(fields: [pedidoId], references: [id], onDelete: Cascade)
  pedidoId String

  @@index([pedidoId])
}

model Feedback {
  id    String   @id @default(cuid())
  fecha DateTime
  texto String
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  password      String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  dni           String?
  curso         String
  role          RoleType  @default(STUDENT)
  accounts      Account[]
  sessions      Session[]
  pedidos       Pedido[]  @relation("Alumno")
  aprobaciones  Pedido[]  @relation("Profesor")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
